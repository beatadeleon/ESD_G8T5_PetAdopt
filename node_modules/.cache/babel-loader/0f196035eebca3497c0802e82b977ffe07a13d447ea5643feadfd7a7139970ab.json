{"ast":null,"code":"import { createStore } from 'vuex';\nimport { auth } from './firebaseConfig';\nimport { getDatabase, ref, set } from 'firebase/database';\nimport { createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, updateProfile } from 'firebase/auth';\n\n//creates a store with action for authentication. \n\nconst store = createStore({\n  state: {\n    user: {\n      loggedIn: false,\n      data: null\n    }\n  },\n  getters: {\n    user(state) {\n      return state.user;\n    }\n  },\n  mutations: {\n    SET_USER(state, payload) {\n      state.user.data = payload;\n    },\n    SET_LOGGED_IN(state, value) {\n      state.user.loggedIn = value;\n    }\n  },\n  actions: {\n    async registerUser(context, {\n      email,\n      password,\n      name,\n      address,\n      pcode,\n      role,\n      pnum\n    }) {\n      try {\n        // Create the user in Firebase Authentication\n        const response = await createUserWithEmailAndPassword(auth, email, password);\n        if (response) {\n          const user = response.user;\n          await updateProfile(user, {\n            displayName: name\n          });\n          const db = getDatabase();\n          await set(ref(db, 'users/' + user.uid), {\n            displayName: name,\n            email: email,\n            address: address,\n            pcode: pcode,\n            role: role,\n            phoneNumber: pnum\n            // Add any other user information you want to store\n          });\n          context.commit('SET_USER', user);\n        } else {\n          throw new Error('Unable to register user');\n        }\n      } catch (error) {\n        console.error('Registration error:', error);\n        throw error;\n      }\n    },\n    async loginUser(context, {\n      email,\n      password\n    }) {\n      const response = await signInWithEmailAndPassword(auth, email, password);\n      if (response) {\n        context.commit('SET_USER', response.user);\n      } else {\n        throw new Error('login failed');\n      }\n    },\n    async logoutUser(context) {\n      await signOut(auth);\n      context.commit('SET_USER', null);\n      window.location.reload();\n    },\n    async fetchUser(context, user) {\n      context.commit('SET_LOGGED_IN', user !== null);\n      if (user) {\n        context.commit('SET_USER', {\n          userId: user.userId,\n          displayName: user.displayName,\n          email: user.email,\n          role: user.role\n        });\n      } else {\n        context.commit('SET_USER', null);\n      }\n    }\n  }\n});\n\n// export the store\nexport default store;","map":{"version":3,"names":["createStore","auth","getDatabase","ref","set","createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","updateProfile","store","state","user","loggedIn","data","getters","mutations","SET_USER","payload","SET_LOGGED_IN","value","actions","registerUser","context","email","password","name","address","pcode","role","pnum","response","displayName","db","uid","phoneNumber","commit","Error","error","console","loginUser","logoutUser","window","location","reload","fetchUser","userId"],"sources":["/Users/junyi/Documents/petadopt/src/store.js"],"sourcesContent":["import { createStore } from 'vuex';\nimport { auth } from './firebaseConfig';\nimport { getDatabase, ref, set} from 'firebase/database';\n\nimport {\n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword,\n  signOut,\n  updateProfile,\n\n} from 'firebase/auth'\n\n//creates a store with action for authentication. \n\nconst store = createStore({\n  state: {\n    user: {\n      loggedIn: false,\n      data: null,\n    }\n  },\n\n  getters: {\n    user(state) {\n      return state.user\n    }\n  },\n  mutations: {\n    SET_USER(state, payload) {\n      state.user.data = payload\n    },\n    SET_LOGGED_IN(state, value) {\n      state.user.loggedIn = value\n    },\n  },\n  actions: {\n    async registerUser(context, { email, password, name, address, pcode, role, pnum }) {\n      try {\n        // Create the user in Firebase Authentication\n        const response = await createUserWithEmailAndPassword(auth, email, password);\n        if (response) {\n          const user = response.user;\n          await updateProfile(user, { displayName: name });\n          const db = getDatabase();\n          await set(ref(db, 'users/' + user.uid), {\n            displayName: name,\n            email: email,\n            address: address,\n            pcode: pcode,\n            role: role,\n            phoneNumber: pnum,\n            // Add any other user information you want to store\n          });\n          context.commit('SET_USER', user);\n        } else {\n          throw new Error('Unable to register user');\n        }\n      } catch (error) {\n        console.error('Registration error:', error);\n        throw error;\n      }\n    },\n\n    async loginUser(context, { email, password }) {\n      const response = await signInWithEmailAndPassword(auth, email, password)\n      if (response) {\n        context.commit('SET_USER', response.user);\n      } else {\n        throw new Error('login failed')\n      }\n    },\n\n    async logoutUser(context) {\n      await signOut(auth);\n      context.commit('SET_USER', null);\n      window.location.reload();\n    },\n\n    async fetchUser(context, user) {\n      context.commit('SET_LOGGED_IN', user !== null)\n      if (user) {\n        context.commit('SET_USER', {\n          userId: user.userId,\n          displayName: user.displayName,\n          email: user.email,\n          role: user.role,\n        })\n      } else {\n        context.commit('SET_USER', null)\n      }\n    },\n\n    \n  }\n})\n\n// export the store\nexport default store"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}