{"ast":null,"code":"import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_router_link = _resolveComponent(\"router-link\");\n  return $options.isUser ? (_openBlock(), _createBlock(_component_router_link, {\n    key: 0,\n    to: \"/dashboard\"\n  })) : (_openBlock(), _createBlock(_component_router_link, {\n    key: 1,\n    to: \"/auth/login\"\n  }));\n}","map":{"version":3,"names":["$options","isUser","_createBlock","_component_router_link","key","to"],"sources":["/Users/junyi/Documents/petadopt/src/components/AppHeader.vue"],"sourcesContent":["<script setup>\nimport { getCurrentScope} from 'vue'\n\nconsole.log(getCurrentScope())\n\n\n</script>\n\n<template>\n    <router-link v-if=\"isUser\" to=\"/dashboard\"></router-link>\n    <router-link v-else to=\"/auth/login\"></router-link>\n\n\n</template>\n\n\n\n<script>\nimport { auth, database } from '../firebaseConfig';\nimport { ref, get } from 'firebase/database';\n// import { useStore } from 'vuex'\nimport { useRouter } from 'vue-router'\n// import { useDatabaseList } from 'vuefire'\n\n\n// const foodEvents = useDatabaseList(ref(database, \"foodEvent\"));\n// const crowdfunding = useDatabaseList(ref(database, \"crowdfundingEvent\"));\n// console.log(foodEvents)\n\nexport default {\n  data() {\n    return {\n      userRole: null,\n      // store: useStore(),\n      router: useRouter(),\n\n      currentTime: new Date().getTime(),\n      // firebaseFoodEvents: foodEvents,\n      // firebaseCrowdfundEvents: crowdfunding,\n    };\n  },\n  mounted() {\n    this.fetchUserRole();\n \n  },\n  computed: {\n    isUser() {\n      return this.userRole === 'user';\n    },\n    isAdmin() {\n      return this.userRole === 'admin';\n    },\n   \n  },\n  methods: {\n    fetchUserRole() {\n  auth.onAuthStateChanged((user) => {\n    if (user && user.uid) { // Null check added here\n      const userRef = ref(database, `users/${user.uid}/role`);\n      get(userRef)\n        .then((snapshot) => {\n          this.userRole = snapshot.val();\n          console.log(\"User Role from Database:\", this.userRole);\n        })\n        .catch((error) => {\n          console.error(\"Error fetching user role:\", error);\n        });\n    } else {\n      // Handle the case where the user or user.uid is null\n      console.log(\"User or user UID is null\");\n    }\n  });\n},\n\n  },\n    async signOut() {\n      await this.store.dispatch('logoutUser');\n      this.router.push('/');\n    },\n  };\n</script>\n\n\n"],"mappings":";;;SASuBA,QAAA,CAAAC,MAAM,I,cAAzBC,YAAA,CAAyDC,sBAAA;IAT7DC,GAAA;IAS+BC,EAAE,EAAC;uBAC9BH,YAAA,CAAmDC,sBAAA;IAVvDC,GAAA;IAUwBC,EAAE,EAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}