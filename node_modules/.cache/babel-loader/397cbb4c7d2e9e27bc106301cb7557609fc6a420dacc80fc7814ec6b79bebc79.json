{"ast":null,"code":"import { createRouter, createWebHistory } from 'vue-router';\nimport { auth, database } from '../firebaseConfig';\nimport Login from '../auth/login.vue';\nimport Register from '../auth/register.vue';\nimport { ref, get } from 'firebase/database';\nconst routes = [{\n  path: '/auth/login',\n  name: 'login',\n  component: Login,\n  meta: {\n    requiresAuth: false\n  }\n}, {\n  path: '/auth/register',\n  name: 'Register',\n  component: RegisterComponentx,\n  meta: {\n    requiresAuth: false\n  }\n}];\nconst router = createRouter({\n  history: createWebHistory(),\n  routes\n});\nrouter.beforeEach((to, from, next) => {\n  const requiresAuth = to.matched.some(record => record.meta.requiresAuth);\n  const requiredRole = to.meta.requiredRole;\n  auth.onAuthStateChanged(user => {\n    if (requiresAuth && !user) {\n      // If the route requires authentication and the user is not logged in, redirect to the login page\n      next('/auth/login');\n    } else {\n      if (requiredRole && user) {\n        const userRef = ref(database, `users/${user.uid}/role`);\n        get(userRef).then(snapshot => {\n          const userRole = snapshot.val();\n          //console.log(\"User Role from Database:\", userRole);\n          if (userRole !== requiredRole) {\n            //console.log(\"User doesn't have the required role, redirecting.\");\n            next('/auth/login');\n          } else {\n            //console.log(\"User has the required role, proceeding to the route.\");\n            next();\n          }\n        }).catch(error => {\n          console.error(\"Error fetching user role:\", error);\n          next('/');\n        });\n      } else {\n        //console.log(\"No required role or no user role defined, proceeding to the route.\");\n        next();\n      }\n    }\n  });\n});\nexport default router;","map":{"version":3,"names":["createRouter","createWebHistory","auth","database","Login","Register","ref","get","routes","path","name","component","meta","requiresAuth","RegisterComponentx","router","history","beforeEach","to","from","next","matched","some","record","requiredRole","onAuthStateChanged","user","userRef","uid","then","snapshot","userRole","val","catch","error","console"],"sources":["/Users/junyi/Documents/petadopt/src/routes/index.js"],"sourcesContent":["import { createRouter, createWebHistory } from 'vue-router';\nimport { auth, database } from '../firebaseConfig';\nimport Login from '../auth/login.vue';\nimport Register from '../auth/register.vue';\n\nimport { ref, get } from 'firebase/database'\n\n\n\n\nconst routes = [\n    {\n        path: '/auth/login',\n        name: 'login',\n        component: Login,\n        meta: { requiresAuth: false },\n    },\n    {\n        path: '/auth/register',\n        name: 'Register',\n        component: RegisterComponentx,\n        meta: { requiresAuth: false },\n    },\n  \n]\n\n\nconst router = createRouter({ \n    history: createWebHistory(),\n    routes\n})\n\nrouter.beforeEach((to, from, next) => {\n    const requiresAuth = to.matched.some((record) => record.meta.requiresAuth);\n    const requiredRole = to.meta.requiredRole;\n    auth.onAuthStateChanged((user) => {\n        if (requiresAuth && !user) {\n            // If the route requires authentication and the user is not logged in, redirect to the login page\n            next('/auth/login');\n        } else {\n            if (requiredRole && user) {\n                const userRef = ref(database, `users/${user.uid}/role`);\n                get(userRef).then((snapshot) => {\n                    const userRole = snapshot.val();\n                    //console.log(\"User Role from Database:\", userRole);\n                    if (userRole !== requiredRole) {\n                        //console.log(\"User doesn't have the required role, redirecting.\");\n                        next('/auth/login');\n                    } else {\n                        //console.log(\"User has the required role, proceeding to the route.\");\n                        next();\n                    }\n                }).catch((error) => {\n                    console.error(\"Error fetching user role:\", error);\n                    next('/');\n                });\n            } else {\n                //console.log(\"No required role or no user role defined, proceeding to the route.\");\n                next();\n            }\n        }\n    });\n})\n\n\nexport default router"],"mappings":"AAAA,SAASA,YAAY,EAAEC,gBAAgB,QAAQ,YAAY;AAC3D,SAASC,IAAI,EAAEC,QAAQ,QAAQ,mBAAmB;AAClD,OAAOC,KAAK,MAAM,mBAAmB;AACrC,OAAOC,QAAQ,MAAM,sBAAsB;AAE3C,SAASC,GAAG,EAAEC,GAAG,QAAQ,mBAAmB;AAK5C,MAAMC,MAAM,GAAG,CACX;EACIC,IAAI,EAAE,aAAa;EACnBC,IAAI,EAAE,OAAO;EACbC,SAAS,EAAEP,KAAK;EAChBQ,IAAI,EAAE;IAAEC,YAAY,EAAE;EAAM;AAChC,CAAC,EACD;EACIJ,IAAI,EAAE,gBAAgB;EACtBC,IAAI,EAAE,UAAU;EAChBC,SAAS,EAAEG,kBAAkB;EAC7BF,IAAI,EAAE;IAAEC,YAAY,EAAE;EAAM;AAChC,CAAC,CAEJ;AAGD,MAAME,MAAM,GAAGf,YAAY,CAAC;EACxBgB,OAAO,EAAEf,gBAAgB,CAAC,CAAC;EAC3BO;AACJ,CAAC,CAAC;AAEFO,MAAM,CAACE,UAAU,CAAC,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EAClC,MAAMP,YAAY,GAAGK,EAAE,CAACG,OAAO,CAACC,IAAI,CAAEC,MAAM,IAAKA,MAAM,CAACX,IAAI,CAACC,YAAY,CAAC;EAC1E,MAAMW,YAAY,GAAGN,EAAE,CAACN,IAAI,CAACY,YAAY;EACzCtB,IAAI,CAACuB,kBAAkB,CAAEC,IAAI,IAAK;IAC9B,IAAIb,YAAY,IAAI,CAACa,IAAI,EAAE;MACvB;MACAN,IAAI,CAAC,aAAa,CAAC;IACvB,CAAC,MAAM;MACH,IAAII,YAAY,IAAIE,IAAI,EAAE;QACtB,MAAMC,OAAO,GAAGrB,GAAG,CAACH,QAAQ,EAAG,SAAQuB,IAAI,CAACE,GAAI,OAAM,CAAC;QACvDrB,GAAG,CAACoB,OAAO,CAAC,CAACE,IAAI,CAAEC,QAAQ,IAAK;UAC5B,MAAMC,QAAQ,GAAGD,QAAQ,CAACE,GAAG,CAAC,CAAC;UAC/B;UACA,IAAID,QAAQ,KAAKP,YAAY,EAAE;YAC3B;YACAJ,IAAI,CAAC,aAAa,CAAC;UACvB,CAAC,MAAM;YACH;YACAA,IAAI,CAAC,CAAC;UACV;QACJ,CAAC,CAAC,CAACa,KAAK,CAAEC,KAAK,IAAK;UAChBC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;UACjDd,IAAI,CAAC,GAAG,CAAC;QACb,CAAC,CAAC;MACN,CAAC,MAAM;QACH;QACAA,IAAI,CAAC,CAAC;MACV;IACJ;EACJ,CAAC,CAAC;AACN,CAAC,CAAC;AAGF,eAAeL,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}