{"ast":null,"code":"import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_router_link = _resolveComponent(\"router-link\");\n  return $options.isUser ? (_openBlock(), _createBlock(_component_router_link, {\n    key: 0,\n    to: \"/dashboard\"\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"Dashboard\")]),\n    _: 1 /* STABLE */\n  })) : (_openBlock(), _createBlock(_component_router_link, {\n    key: 1,\n    to: \"/auth/login\"\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"Login\")]),\n    _: 1 /* STABLE */\n  }));\n}","map":{"version":3,"names":["$options","isUser","_createBlock","_component_router_link","key","to","default","_withCtx","_createTextVNode","_"],"sources":["/Users/junyi/Documents/petadopt/src/components/AppHeader.vue"],"sourcesContent":["<script setup>\nimport { getCurrentScope} from 'vue'\n\nconsole.log(getCurrentScope())\n\n//console.log(foodEvents) \n</script>\n\n<template>\n    <router-link v-if=\"isUser\" to=\"/dashboard\">Dashboard</router-link>\n    <router-link v-else to=\"/auth/login\">Login</router-link>\n\n\n</template>\n\n\n\n<script>\nimport { auth, database } from '../firebaseConfig';\nimport { ref, get } from 'firebase/database';\nimport { useStore } from 'vuex'\nimport { useRouter } from 'vue-router'\n// import { useDatabaseList } from 'vuefire'\n\n\n// const foodEvents = useDatabaseList(ref(database, \"foodEvent\"));\n// const crowdfunding = useDatabaseList(ref(database, \"crowdfundingEvent\"));\n// console.log(foodEvents)\n\nexport default {\n  data() {\n    return {\n      userRole: null,\n      store: useStore(),\n      router: useRouter(),\n      isNotificationsOpen: false,\n      currentTime: new Date().getTime(),\n      // firebaseFoodEvents: foodEvents,\n      // firebaseCrowdfundEvents: crowdfunding,\n    };\n  },\n  mounted() {\n    this.fetchUserRole();\n \n  },\n  computed: {\n    isUser() {\n      return this.userRole === 'user';\n    },\n    isAdmin() {\n      return this.userRole === 'admin';\n    },\n   \n  },\n\n    fetchUserRole() {\n      auth.onAuthStateChanged((user) => {\n        const userRef = ref(database, `users/${user.uid}/role`);\n        get(userRef)\n          .then((snapshot) => {\n            this.userRole = snapshot.val();\n            console.log(\"User Role from Database:\", this.userRole);\n          })\n          .catch((error) => {\n            console.error(\"Error fetching user role:\", error);\n          });\n      });\n    },\n    async signOut() {\n      await this.store.dispatch('logoutUser');\n      this.router.push('/');\n    },\n  };\n</script>\n\n\n"],"mappings":";;;SASuBA,QAAA,CAAAC,MAAM,I,cAAzBC,YAAA,CAAkEC,sBAAA;IATtEC,GAAA;IAS+BC,EAAE,EAAC;;IATlCC,OAAA,EAAAC,QAAA,CAS+C,MAAS,CATxDC,gBAAA,CAS+C,WAAS,E;IATxDC,CAAA;uBAUIP,YAAA,CAAwDC,sBAAA;IAV5DC,GAAA;IAUwBC,EAAE,EAAC;;IAV3BC,OAAA,EAAAC,QAAA,CAUyC,MAAK,CAV9CC,gBAAA,CAUyC,OAAK,E;IAV9CC,CAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}