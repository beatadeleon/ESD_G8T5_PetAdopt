{"ast":null,"code":"import { createRouter, createWebHistory } from 'vue-router';\nimport { auth, database } from '../firebaseConfig';\nimport Login from '../views/auth/Login.vue';\nimport Register from '../views/auth/Register.vue';\nimport Home from '../views/Home.vue';\nconst routes = [{\n  path: '/auth/login',\n  name: 'login',\n  component: Login,\n  meta: {\n    requiresAuth: false\n  }\n}, {\n  path: '/auth/register',\n  name: 'Register',\n  component: Register,\n  meta: {\n    requiresAuth: false\n  }\n}, {\n  path: '/myDonations',\n  name: \"myDonations\",\n  component: myDonations,\n  meta: {\n    requiresAuth: true,\n    requiredRole: 'user'\n  }\n}, {\n  path: '/',\n  name: 'Home',\n  component: Home\n}, {\n  path: '/aboutUs',\n  name: 'aboutUs',\n  component: aboutUs\n}, {\n  path: '/auth/profile',\n  name: 'Profile',\n  component: profile,\n  meta: {\n    requiresAuth: true\n  }\n}, {\n  path: '/foodeve/creation',\n  name: 'createEvent',\n  component: createEvent,\n  meta: {\n    requiresAuth: true,\n    requiredRole: 'foodBank'\n  }\n}, {\n  path: '/foodeve/trending',\n  name: 'foodEventsTrending',\n  component: trendingEvents,\n  meta: {\n    requiresAuth: true,\n    requiredRole: 'user'\n  }\n}, {\n  path: '/foodeve/:id',\n  name: \"foodEvent\",\n  component: FoodEvent,\n  // children: [\n  //     {\n  //         path: 'groupDonation/create',\n  //         name: 'createGroupDonation',\n  //         component: CreateGroupDonation,\n  //     }\n  // ],\n  meta: {\n    requiresAuth: true,\n    requiredRole: 'user'\n  }\n}, {\n  path: '/search',\n  name: 'Search',\n  component: Search,\n  meta: {\n    requiresAuth: true,\n    requiredRole: 'user'\n  }\n}, {\n  path: '/crowdfunding',\n  name: 'Crowdfunding',\n  component: Crowdfunding,\n  meta: {\n    requiresAuth: true,\n    requiredRole: 'user'\n  }\n}, {\n  path: '/crowdfunding/:id',\n  name: \"CrowdfundCheckout\",\n  component: CrowdfundCheckout,\n  meta: {\n    requiresAuth: true,\n    requiredRole: 'user'\n  }\n}, {\n  path: '/crowdfunding/:id/success',\n  name: \"SuccessCrowdfund\",\n  component: SuccessCrowdfund,\n  meta: {\n    requiresAuth: true,\n    requiredRole: 'user'\n  }\n}, {\n  path: '/crowdfunding/error',\n  name: \"ErrorCrowdfund\",\n  component: ErrorCrowdfund,\n  meta: {\n    requiresAuth: true,\n    requiredRole: 'user'\n  }\n}, {\n  path: '/crowdfunding/creation',\n  name: 'createCrowdfundingEvent',\n  component: createCrowdfundingEvent,\n  meta: {\n    requiresAuth: true,\n    requiredRole: 'foodBank'\n  }\n}, {\n  path: '/foodeve/approve',\n  name: 'approveFoodDonation',\n  component: approveFoodEve,\n  meta: {\n    requiresAuth: true,\n    requiredRole: 'foodBank'\n  }\n}, {\n  path: '/foodbank/delivery/create',\n  name: 'createDeliveryDriver',\n  component: deliveryDriverCreation,\n  meta: {\n    requiresAuth: true,\n    requiredRole: 'foodBank'\n  }\n}, {\n  path: '/foodeve/groupDonations/approve',\n  name: 'approveGroupRequestComponent',\n  component: approveGroupRequest,\n  meta: {\n    requiresAuth: true,\n    requiredRole: 'user'\n  }\n}, {\n  path: '/test',\n  name: 'test',\n  component: ImageUpload,\n  meta: {\n    requiresAuth: true\n  }\n}];\nconst router = createRouter({\n  history: createWebHistory(),\n  routes\n});\nrouter.beforeEach((to, from, next) => {\n  const requiresAuth = to.matched.some(record => record.meta.requiresAuth);\n  const requiredRole = to.meta.requiredRole;\n  auth.onAuthStateChanged(user => {\n    if (requiresAuth && !user) {\n      // If the route requires authentication and the user is not logged in, redirect to the login page\n      next('/auth/login');\n    } else {\n      if (requiredRole && user) {\n        const userRef = ref(database, `users/${user.uid}/role`);\n        get(userRef).then(snapshot => {\n          const userRole = snapshot.val();\n          //console.log(\"User Role from Database:\", userRole);\n          if (userRole !== requiredRole) {\n            //console.log(\"User doesn't have the required role, redirecting.\");\n            next('/');\n          } else {\n            //console.log(\"User has the required role, proceeding to the route.\");\n            next();\n          }\n        }).catch(error => {\n          //console.error(\"Error fetching user role:\", error);\n          next('/');\n        });\n      } else {\n        //console.log(\"No required role or no user role defined, proceeding to the route.\");\n        next();\n      }\n    }\n  });\n});\nexport default router;","map":{"version":3,"names":["createRouter","createWebHistory","auth","database","Login","Register","Home","routes","path","name","component","meta","requiresAuth","myDonations","requiredRole","aboutUs","profile","createEvent","trendingEvents","FoodEvent","Search","Crowdfunding","CrowdfundCheckout","SuccessCrowdfund","ErrorCrowdfund","createCrowdfundingEvent","approveFoodEve","deliveryDriverCreation","approveGroupRequest","ImageUpload","router","history","beforeEach","to","from","next","matched","some","record","onAuthStateChanged","user","userRef","ref","uid","get","then","snapshot","userRole","val","catch","error"],"sources":["/Users/junyi/Documents/petadopt/src/routes/index.js"],"sourcesContent":["import { createRouter, createWebHistory } from 'vue-router';\nimport { auth, database } from '../firebaseConfig';\nimport Login from '../views/auth/Login.vue';\nimport Register from '../views/auth/Register.vue';\nimport Home from '../views/Home.vue';\n\n\n\n\nconst routes = [\n    {\n        path: '/auth/login',\n        name: 'login',\n        component: Login,\n        meta: { requiresAuth: false },\n    },\n    {\n        path: '/auth/register',\n        name: 'Register',\n        component: Register,\n        meta: { requiresAuth: false },\n    },\n    {\n        path: '/myDonations',\n        name: \"myDonations\",\n        component: myDonations,\n        meta: { requiresAuth: true, requiredRole: 'user'},\n    },\n    {\n        path: '/',\n        name: 'Home',\n        component: Home,\n    },\n    {\n        path: '/aboutUs',\n        name: 'aboutUs',\n        component: aboutUs,\n\n    },\n    {\n        path: '/auth/profile',\n        name: 'Profile',\n        component: profile,\n        meta: { requiresAuth: true }\n    },\n    {\n        path: '/foodeve/creation',\n        name: 'createEvent',\n        component: createEvent,\n        meta: { requiresAuth: true, requiredRole: 'foodBank' },\n    },\n    {\n        path: '/foodeve/trending',\n        name: 'foodEventsTrending',\n        component: trendingEvents,\n        meta: { requiresAuth: true, requiredRole: 'user' },\n    },\n    {\n        path: '/foodeve/:id',\n        name: \"foodEvent\",\n        component: FoodEvent,\n        // children: [\n        //     {\n        //         path: 'groupDonation/create',\n        //         name: 'createGroupDonation',\n        //         component: CreateGroupDonation,\n        //     }\n        // ],\n        meta: { requiresAuth: true, requiredRole: 'user' },\n    },\n    {\n        path: '/search',\n        name: 'Search',\n        component: Search,\n        meta: { requiresAuth: true, requiredRole: 'user' },\n    },\n    {\n        path: '/crowdfunding',\n        name: 'Crowdfunding',\n        component: Crowdfunding,\n        meta: { requiresAuth: true, requiredRole: 'user' },\n    },\n    {\n        path: '/crowdfunding/:id',\n        name: \"CrowdfundCheckout\",\n        component: CrowdfundCheckout,\n        meta: { requiresAuth: true, requiredRole: 'user' },\n    },\n    {\n        path: '/crowdfunding/:id/success',\n        name: \"SuccessCrowdfund\",\n        component: SuccessCrowdfund,\n        meta: { requiresAuth: true, requiredRole: 'user' },\n    },\n    {\n        path: '/crowdfunding/error',\n        name: \"ErrorCrowdfund\",\n        component: ErrorCrowdfund,\n        meta: { requiresAuth: true, requiredRole: 'user' },\n    },\n    {\n        path: '/crowdfunding/creation',\n        name: 'createCrowdfundingEvent',\n        component: createCrowdfundingEvent,\n        meta: { requiresAuth: true, requiredRole: 'foodBank' },\n    },\n    {\n        path: '/foodeve/approve',\n        name: 'approveFoodDonation',\n        component: approveFoodEve,\n        meta: { requiresAuth: true, requiredRole: 'foodBank' },\n    },\n    {\n        path: '/foodbank/delivery/create',\n        name: 'createDeliveryDriver',\n        component: deliveryDriverCreation,\n        meta: { requiresAuth: true, requiredRole: 'foodBank' },\n    },\n    {\n        path: '/foodeve/groupDonations/approve',\n        name: 'approveGroupRequestComponent',\n        component: approveGroupRequest,\n        meta: { requiresAuth: true, requiredRole: 'user' },\n    },\n    {\n        path: '/test',\n        name: 'test',\n        component: ImageUpload,\n        meta: { requiresAuth: true },\n    }\n]\n\n\nconst router = createRouter({ \n    history: createWebHistory(),\n    routes\n})\n\nrouter.beforeEach((to, from, next) => {\n    const requiresAuth = to.matched.some((record) => record.meta.requiresAuth);\n    const requiredRole = to.meta.requiredRole;\n    auth.onAuthStateChanged((user) => {\n        if (requiresAuth && !user) {\n            // If the route requires authentication and the user is not logged in, redirect to the login page\n            next('/auth/login');\n        } else {\n            if (requiredRole && user) {\n                const userRef = ref(database, `users/${user.uid}/role`);\n                get(userRef).then((snapshot) => {\n                    const userRole = snapshot.val();\n                    //console.log(\"User Role from Database:\", userRole);\n                    if (userRole !== requiredRole) {\n                        //console.log(\"User doesn't have the required role, redirecting.\");\n                        next('/');\n                    } else {\n                        //console.log(\"User has the required role, proceeding to the route.\");\n                        next();\n                    }\n                }).catch((error) => {\n                    //console.error(\"Error fetching user role:\", error);\n                    next('/');\n                });\n            } else {\n                //console.log(\"No required role or no user role defined, proceeding to the route.\");\n                next();\n            }\n        }\n    });\n})\n\n\nexport default router"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}